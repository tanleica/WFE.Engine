// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WFE.Engine.Persistence;

#nullable disable

namespace WFE.Engine.Migrations
{
    [DbContext(typeof(SagaDbContext))]
    partial class SagaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WFE.Engine.Domain.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("MessageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("Processed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.HasKey("MessageId");

                    b.ToTable("OutboxMessages", (string)null);
                });

            modelBuilder.Entity("WFE.Engine.Domain.Outbox.OutboxState", b =>
                {
                    b.Property<Guid>("StateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Delivered")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid");

                    b.Property<int>("RetryCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("Status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("text")
                        .HasDefaultValue("Pending");

                    b.HasKey("StateId");

                    b.HasIndex("MessageId")
                        .IsUnique();

                    b.ToTable("OutboxStates", (string)null);
                });

            modelBuilder.Entity("WFE.Engine.Domain.Workflow.StepAssignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AssignedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CorrelationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsCurrent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTime?>("ReplacedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("WorkflowStepId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WorkflowStepId");

                    b.ToTable("StepAssignments");
                });

            modelBuilder.Entity("WFE.Engine.Domain.Workflow.StepProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ActorEmail")
                        .HasColumnType("text");

                    b.Property<string>("ActorEmployeeCode")
                        .HasColumnType("text");

                    b.Property<string>("ActorFullName")
                        .HasColumnType("text");

                    b.Property<string>("ActorUserId")
                        .HasColumnType("text");

                    b.Property<string>("ActorUsername")
                        .HasColumnType("text");

                    b.Property<bool>("CanActorVote")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("ConditionPassed")
                        .HasColumnType("boolean");

                    b.Property<Guid>("CorrelationId")
                        .HasColumnType("uuid");

                    b.Property<string>("FilterMode")
                        .HasColumnType("text");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<Guid>("WorkflowStepId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WorkflowStepId");

                    b.ToTable("StepProgresses");
                });

            modelBuilder.Entity("WFE.Engine.Domain.Workflow.Workflow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Workflows");
                });

            modelBuilder.Entity("WFE.Engine.Domain.Workflow.WorkflowActor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EmployeeCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsMandatory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("WorkflowStepId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WorkflowStepId");

                    b.ToTable("WorkflowActors");
                });

            modelBuilder.Entity("WFE.Engine.Domain.Workflow.WorkflowInstance", b =>
                {
                    b.Property<Guid>("CorrelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CurrentStep")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DbType")
                        .HasColumnType("text");

                    b.Property<string>("EncryptedConnectionString")
                        .HasColumnType("text");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsRejected")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastActionAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LastActorEmail")
                        .HasColumnType("text");

                    b.Property<string>("LastActorEmployeeCode")
                        .HasColumnType("text");

                    b.Property<string>("LastActorFullName")
                        .HasColumnType("text");

                    b.Property<string>("LastActorUsername")
                        .HasColumnType("text");

                    b.Property<Guid>("WorkflowId")
                        .HasColumnType("uuid");

                    b.HasKey("CorrelationId");

                    b.ToTable("WorkflowInstances");
                });

            modelBuilder.Entity("WFE.Engine.Domain.Workflow.WorkflowRule", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConditionScript")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LogicalOperator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RuleName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("WorkflowStepId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WorkflowStepId");

                    b.ToTable("WorkflowRule");
                });

            modelBuilder.Entity("WFE.Engine.Domain.Workflow.WorkflowStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ApprovalType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConditionScript")
                        .HasColumnType("text");

                    b.Property<string>("StepName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StepOrder")
                        .HasColumnType("integer");

                    b.Property<Guid>("WorkflowId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WorkflowId");

                    b.ToTable("WorkflowSteps");
                });

            modelBuilder.Entity("WFE.Engine.Domain.Outbox.OutboxState", b =>
                {
                    b.HasOne("WFE.Engine.Domain.Outbox.OutboxMessage", "Message")
                        .WithOne("State")
                        .HasForeignKey("WFE.Engine.Domain.Outbox.OutboxState", "MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("WFE.Engine.Domain.Workflow.StepAssignment", b =>
                {
                    b.HasOne("WFE.Engine.Domain.Workflow.WorkflowStep", "Step")
                        .WithMany()
                        .HasForeignKey("WorkflowStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Step");
                });

            modelBuilder.Entity("WFE.Engine.Domain.Workflow.StepProgress", b =>
                {
                    b.HasOne("WFE.Engine.Domain.Workflow.WorkflowStep", "WorkflowStep")
                        .WithMany()
                        .HasForeignKey("WorkflowStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkflowStep");
                });

            modelBuilder.Entity("WFE.Engine.Domain.Workflow.WorkflowActor", b =>
                {
                    b.HasOne("WFE.Engine.Domain.Workflow.WorkflowStep", "Step")
                        .WithMany("Actors")
                        .HasForeignKey("WorkflowStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Step");
                });

            modelBuilder.Entity("WFE.Engine.Domain.Workflow.WorkflowRule", b =>
                {
                    b.HasOne("WFE.Engine.Domain.Workflow.WorkflowStep", "Step")
                        .WithMany("Rules")
                        .HasForeignKey("WorkflowStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Step");
                });

            modelBuilder.Entity("WFE.Engine.Domain.Workflow.WorkflowStep", b =>
                {
                    b.HasOne("WFE.Engine.Domain.Workflow.Workflow", "Workflow")
                        .WithMany("Steps")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("WFE.Engine.Domain.Outbox.OutboxMessage", b =>
                {
                    b.Navigation("State");
                });

            modelBuilder.Entity("WFE.Engine.Domain.Workflow.Workflow", b =>
                {
                    b.Navigation("Steps");
                });

            modelBuilder.Entity("WFE.Engine.Domain.Workflow.WorkflowStep", b =>
                {
                    b.Navigation("Actors");

                    b.Navigation("Rules");
                });
#pragma warning restore 612, 618
        }
    }
}
