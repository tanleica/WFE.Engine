// <auto-generated />
using System;
using WFE.Engine.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace WFE.Engine.Migrations
{
    [DbContext(typeof(SagaDbContext))]
    [Migration("20250329095012_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BreRoutingSlipWorkflow.Domain.Workflow.StepProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CorrelationId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<string>("PerformedByEmail")
                        .HasColumnType("text");

                    b.Property<string>("PerformedByEmployeeCode")
                        .HasColumnType("text");

                    b.Property<string>("PerformedByFullName")
                        .HasColumnType("text");

                    b.Property<string>("PerformedByUsername")
                        .HasColumnType("text");

                    b.Property<string>("Reason")
                        .HasColumnType("text");

                    b.Property<Guid>("WorkflowStepId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WorkflowStepId");

                    b.ToTable("StepProgresses");
                });

            modelBuilder.Entity("BreRoutingSlipWorkflow.Domain.Workflow.Workflow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Workflows");
                });

            modelBuilder.Entity("BreRoutingSlipWorkflow.Domain.Workflow.WorkflowActor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ActorName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("IsMandatory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid>("WorkflowStepId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WorkflowStepId");

                    b.ToTable("WorkflowActors");
                });

            modelBuilder.Entity("BreRoutingSlipWorkflow.Domain.Workflow.WorkflowInstance", b =>
                {
                    b.Property<Guid>("CorrelationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CurrentStep")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FinalApprovedByEmail")
                        .HasColumnType("text");

                    b.Property<string>("FinalApprovedByEmployeeCode")
                        .HasColumnType("text");

                    b.Property<string>("FinalApprovedByFullName")
                        .HasColumnType("text");

                    b.Property<string>("FinalApprovedByUsername")
                        .HasColumnType("text");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastActionAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("CorrelationId");

                    b.ToTable("WorkflowInstances");
                });

            modelBuilder.Entity("BreRoutingSlipWorkflow.Domain.Workflow.WorkflowStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ApprovalType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Condition")
                        .HasColumnType("text");

                    b.Property<string>("ConditionScript")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConnectionString")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("DbType")
                        .HasColumnType("integer");

                    b.Property<string>("StepName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StepOrder")
                        .HasColumnType("integer");

                    b.Property<Guid>("WorkflowId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WorkflowId");

                    b.ToTable("WorkflowSteps");
                });

            modelBuilder.Entity("BreRoutingSlipWorkflow.Domain.Workflow.StepProgress", b =>
                {
                    b.HasOne("BreRoutingSlipWorkflow.Domain.Workflow.WorkflowStep", "WorkflowStep")
                        .WithMany()
                        .HasForeignKey("WorkflowStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("WorkflowStep");
                });

            modelBuilder.Entity("BreRoutingSlipWorkflow.Domain.Workflow.WorkflowActor", b =>
                {
                    b.HasOne("BreRoutingSlipWorkflow.Domain.Workflow.WorkflowStep", "Step")
                        .WithMany("Actors")
                        .HasForeignKey("WorkflowStepId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Step");
                });

            modelBuilder.Entity("BreRoutingSlipWorkflow.Domain.Workflow.WorkflowStep", b =>
                {
                    b.HasOne("BreRoutingSlipWorkflow.Domain.Workflow.Workflow", "Workflow")
                        .WithMany("Steps")
                        .HasForeignKey("WorkflowId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workflow");
                });

            modelBuilder.Entity("BreRoutingSlipWorkflow.Domain.Workflow.Workflow", b =>
                {
                    b.Navigation("Steps");
                });

            modelBuilder.Entity("BreRoutingSlipWorkflow.Domain.Workflow.WorkflowStep", b =>
                {
                    b.Navigation("Actors");
                });
#pragma warning restore 612, 618
        }
    }
}
